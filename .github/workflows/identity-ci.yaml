name: identity-ci
on:
  pull_request:
    branches:
      - dev
    paths:
      - 'identity-service/**'

env:
  SERVICE_NAME: identity-service
  CLIENT-SECRET: ${{ secrets.CLIENT_SECRET }}
  GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
  SERVICE_ACCOUNT_KEY: ${{ secrets.SERVICE_ACCOUNT_KEY}}
  SERVICE_ACCOUNT_KEY_BACK_UP: ${{ secrets.SERVICE_ACCOUNT_KEY_BACK_UP }}
  JAVA_VERSION: '21'
  MYSQL_VERSION: '8.0.39'
  MYSQL_HOST: 127.0.0.1
  MYSQL_PORT: 3307
  MYSQL_USER: testuser
  MYSQL_PASSWORD: testpassword
  MYSQL_DATABASE_NAME: delivery

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup JDK 21
      - name: Setup JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'corretto'

      # Step 3: Set up MySQL
      - name: Set up MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          host port: ${{ env.MYSQL_PORT }} # Optional, default value is 3306. The port of host
          container port: ${{ env.MYSQL_PORT }} # Optional, default value is 3306. The port of container
          character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
          collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
          mysql version: 'latest' # Optional, default value is "latest". The version of the MySQL
          mysql database: ${{ env.MYSQL_DATABASE_NAME }} # Optional, default value is "test". The specified database which will be create
          mysql user: ${{ env.MYSQL_USER }} # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
          mysql password: ${{ env.MYSQL_PASSWORD }} # Required if "mysql user" exists. The password for the "mysql user"

      # Step 3: Create Configuration Files
      - name: Create Configuration Files
        working-directory: ${{ env.SERVICE_NAME }}
        run: |
          echo "${{ secrets.CLIENT-SECRET }}" > src/main/resources/client-secret.json
          echo "${{ secrets.GOOGLE_SERVICES }}" > src/main/resources/google-services.json
          echo "${{ secrets.SERVICE_ACCOUNT_KEY }}" > src/main/resources/serviceAccountKey.json
          echo "${{ secrets.SERVICE_ACCOUNT_KEY_BACK_UP }}" > src/main/resources/serviceAccountKey_back_up.json

      # Step 4: Cache SonarCloud packages
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Step 4: Cache Gradle dependencies
      - name: Cache Gradle dependencies
        id: cache-gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 5: fetch dependencies
      - name: Fetch Dependencies
        working-directory: ${{ env.SERVICE_NAME }}
        run: ./gradlew dependencies

      - name: Build and analyze
        working-directory: ${{ env.SERVICE_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          MYSQL_DATABASE_NAME: ${{ env.MYSQL_DATABASE_NAME }}
          MYSQL_HOST: ${{ env.MYSQL_HOST }}
          MYSQL_PORT: ${{ env.MYSQL_PORT }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          SPRING_PROFILES_ACTIVE: default
        run: ./gradlew build sonar --info
#      # Step 6: Build the project using Gradle
#      - name: Build with Gradle
#        working-directory: ${{ env.SERVICE_NAME }}
#        run: ./gradlew build
#
#      # Step 7: Notify success or failure
#      - name: Build Success Notification
#        if: success()
#        run: echo "Build was successful!"
#
#      - name: Build Failure Notification
#        if: failure()
#        run: echo "Build failed!"